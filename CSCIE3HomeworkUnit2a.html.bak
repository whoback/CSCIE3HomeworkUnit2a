<!DOCTYPE html><html>  <head>    <meta content="text/html; charset=windows-1252" http-equiv="content-type">    <title>CSCI E-3 Homework Unit #2</title>    <link rel="stylesheet" href="css/cscie3.css">  </head>  <body class="hw">    <div class="container">      <h1>CSCI E-3 Homework Unit #2</h1>      <h3 class="whatlearn">What you're learning:</h3>      <p>How to handle the most basic information in a computer program: numbers        and strings, arrays, and conditionals.<br>      </p>      <ol>        <li>Math: Basic mathematical calculations underlie nearly everything          that you'll do with a computer program: counting photos to lay out on          a page, calculating prices in a shopping cart, positioning a ball on a          game screen or figuring the length of the bar on a graph. <br>        </li>        <li>String Handling: manipulating text</li>        <li>Arrays</li>        <li>Conditionals, looping, and functions are some of the most basic          structures in computer programming. These underlie just about          everything you'll do in a program.&nbsp; </li>      </ol>      <h3>What you need to do:</h3>      <ol>        <ol>          <li>Follow the example to create your own mathematical converter (10 points)</li>          <li>Place an X in an automatically-chosen random location within a box            (10 points)</li>          <li>Use indexOf() and substr() or slice() to divide your name into two            strings - firstname and lastname (10 points)</li>          <li>Provide a feature in this page that counts the words input into            the input box below (25 points)</li>          <li>Write a function that will calculate the sum of the first 50 even            Fibonacci numbers (20 points)</li>          <li>Image processing (array handling) (<strong>required</strong> for            students taking the course for graduate credit; or <strong>extra              credit</strong> for students taking the course for undergraduate            credit)&nbsp; (25 points, graduate credit or undergraduate extra            credit)</li>        </ol>      </ol>      <br>      <h4>1) Create a mathematical converter for temperature</h4>      <p>js/hw2ConvertTemp.js contains a function called <span style="font-family: monospace;">convertFtoC()</span>        and one called <span style="font-family: monospace;">convertCtoF()</span>,        which, at the moment, do nothing. You're going to provide the code that        makes these functions work to convert Fahrenheit to Celsius, and vice        versa.&nbsp; You can test your code with the form fields below: your        conversion code will run whenever you change the content of the input        fields.</p>      <p>Remember that the formula for converting temperature looks like this:</p>      <span style="font-family: monospace;">°C x 9/5 + 32 = °F<br>        <br>        (°F - 32) x 5/9 = °C</span><br>      <br>      &nbsp; <input size="3" id="degC">°C is equal to <span class="degOutput"        id="degFOut"></span>°F
      <br>&nbsp; <input size="3" id="degF">°F is equal to <span class="degOutput"        id="degCOut"></span>°C
      <p><br>      </p>      <h4>2) Place an X in an automatically-chosen random location within a box</h4>      <p>This is an exercise in using Javascript's random number generator,        along with some simple arithmetic, to place an X in a box in a randomly        chosen location. Applications of this would include placing a game        character on the game board, or setting stars or snowflakes in a        graphic.</p>      <p>Ultimately, your task is to calculate a random x and y coordinate for        the location of the 'X'.&nbsp; You'll have to do some math to get the        random number, generated by a function which returns a floating-point        number between 0 and 1, to map to the width and height of the        js/hw2PutAnX.js contains an empty function for you to add your code.</p>      <p> </p>      <div id="putAnX">        <div id="theX">&nbsp;</div>      </div>      <div id="putAnXButton" class="hwbutton">Place the X!</div>      &nbsp;      <h4>3. Use indexOf() and substr() or substring() to divide your name into        two strings - firstname and lastname</h4>      <p>We're going to use some basic built-in string functions to manipulate a        string: your name. Modify the code in the js/hw2SplitString.js file to        output your first and last name into the page below.</p>      <p><input size="30" id="fullName"> is my full name. </p>      <div id="splitName" class="hwbutton">Split my name!</div>      <br>      <span class="" id="firstname"></span> is my first name<br>      <span class="" id="lastname"></span> is my last name<br>      <h4>4. Write a function that will calculate the sum of the first 50 even        Fibonacci numbers</h4>      <p>Recall that the Fibonacci sequence is a series that begins with two        integers: 0, 1. The next number in the sequence is derived by adding the        previous two numbers, so the Fibonacci sequence looks like this: 0, 1,        1, 2, 3, 5, 8, 13, 21, 34, ...&nbsp;</p>      <p>The button below will run your function, called fiftyEvenFibonacciSum()        and print its result in the space provided. All you have to do is write        the function, which accepts no arguments, and returns the sum of the        first 50 even Fibonacci numbers. Your code will go in        js/hw2FiftyEvenFib.js&nbsp;</p>      <p>Hint: First you'll need a loop that generates Fibonacci numbers. You'll        need a way to test each one for whether it's even or odd. And you'll        need to sum up the even ones, counting them as you go.</p>      <div id="sumFib" class="hwbutton">Get the Sum!</div>      <br>      The sum of the first 50 even Fibonacci numbers is: <span class="" id="sumFibResult"></span>      <br>      <br>      <h4>5. Provide a feature in this page that counts the words input into the        input box below.</h4>      The box below accepts text input from the keyboard or copy/paste.&nbsp;      Your job is to add a feature to this page that provides an approximate      word count for the user who's typing into the page.&nbsp; <br>      <br>      To do this successfully, you'll need to:<br>      <ul>        <li>Create your own Javascript file in the js directory of this project.          Call it whatever you want. </li>        <li>&nbsp;Add a <span style="font-family: monospace;">&lt;script&gt;</span>          tag to the page at the bottom that loads your new js file</li>        <li>In your JS file:</li>        <ul>          <li>Use document.getElementById() to get the textarea element from the            page. You'll need its ID, which you can find in the HTML of this            page.</li>          <li>Write an event handler function that runs every time someone types            in the textarea. It will look something like this:<br>            <span style="font-family: monospace;">myTextareaElement.onkeyup =              function(){<br>              &nbsp;&nbsp;&nbsp; // your code goes here<br>              }<br>            </span></li>          <li>You'll want to access the .value property of the textarea to get            the contents of the box as a String</li>          <li>Use <span style=" font-family: monospace;">String.split()</span>            to divide the string (at word boundaries) into an array of Strings<span              style=" font-family: monospace;"></span></li>          <li>Count the elements in the array. This will be (roughly) the number            of words in the box</li>          <li><span style="font-family: monospace;">Write that value</span> into            the HTML element that looks like this: <span style="font-family: monospace;">&lt;span
              id="wordcount"&gt;&lt;/span&gt;</span></li>        </ul>        <li>Additional Credit: Once you've done the above you'll notice that          this solution as outlined above will not count words correctly if          there are lots of extra 'whitespace' characters in your text.&nbsp;          Can you think of a way to solve this? </li>        <ul>        </ul>      </ul>      <p><textarea id="myWordsToCount" rows="5" cols="60"></textarea><br>      </p>      The wordcount is: <span id="wordcount"></span><br>      <h4>6. Image processing (array handling) </h4>      <p>The image below is appearing inside an HTML canvas element.&nbsp; We'll        learn more about canvas elements later in the course, but for now, the        important thing to know is that, unlike an image displayed normally in        the browser using the IMG tag, the image data that appears in a canvas        element is available to Javascript as a "bitmap". </p>      <p>The bitmap data is an array that maps four numbers to each pixel in the        image: r, g, b, a, where r, g, b are integer values from 0 to 255 which        describe red, green, and blue respectively; and a, which is an 'alpha'        value between 0 and 255 in which 0 is transparent and 255 is completely        opaque. Since there are four array elements for each pixel, the total        array will contain pixels_in_image * 4 elements in all. </p>      <p>The first pixel's red data is at data[0], the second pixel's red data        at data[4], etc. </p>      <p>Your job is to write additional code inside the function that will        modify the image data to create four new versions, as described below        and in the <span style="font-family: monospace;">js/hw2ArrayImageProcessing.js</span>        file.&nbsp; </p>      <p><strong>Important Note: To do this exercise using your local file          system (with no Web server involved), you will need to use Firefox as          your browser. Chrome will display an error due to security          constraints.</strong> </p>      <table style="width: 100%" border="1">        <tbody>          <tr>            <td>Original</td>            <td>BLUE-only version</td>            <td>Reverse-color version</td>            <td>semi-transparent version</td>            <td>add two images version</td>          </tr>          <tr>            <td><canvas id="originalCanvas"></canvas><br>            </td>            <td><canvas id="blueCanvas"></canvas><br>            </td>            <td><canvas id="reverseCanvas"></canvas><br>            </td>            <td><canvas id="transparentCanvas"></canvas><br>            </td>            <td><canvas id="compositeCanvas"></canvas><canvas id="compositeNewImageCanvas"                style="display:none;"></canvas><br>            </td>          </tr>        </tbody>      </table>      <p><br>      </p>      <p>&nbsp; </p>      <p><br>      </p>    </div>    <script type="text/javascript" src="js/hw2ConvertTemp.js"></script>    <script type="text/javascript" src="js/hw2PutAnX.js"></script>    <script type="text/javascript" src="js/hw2SplitString.js"></script>    <script type="text/javascript" src="js/hw2FiftyEvenFib.js"></script>    <script type="text/javascript" src="js/hw2ArrayImageProcessing.js"></script>    <script type="text/javascript" src="js/hw2ArrayImageProcessingSetup.js"></script>  </body></html>